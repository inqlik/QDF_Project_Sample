// SUB routine loading csv Container Map into a QlikView Script, is primarily used by 4.GenericContainerLoader.qvs
// Execute (Call) the Sub in the script by first include the script in the beginning and then use:
// call LoadContainerMap('container map csv', 'Name of Container to link'[,'Optional, retrive Root Path by typing current container name']);
// Container base Variables will be loaded based on ContainerMap.csv
// will return vL.ContainerPathName vL.ContainerFolderName vL.Comment vL.RootPath 


SUB LoadContainerMap(vL.CVSTableName,vL.SpecificVariable,vL.GetRootPath);

//Reset vL.LoadContainerMapCount variable used to identify if two or more identical Variable Prefix exist
SET vL.LoadContainerMapCount=; 

// Loading Container Map csv table as vL.temp_table_map

vL.temp_table_map:
REPLACE LOAD *
FROM
'$(vG.BaseVariablePath)\ContainerMap.csv'
(txt, utf8, embedded labels, delimiter is ',', msq);

// count(ContainerPathName) to find if more than one ContainerPathName is used
REPLACE Left join
Load ContainerPathName,count(ContainerPathName) as ContainerPathNameCount
Resident vL.temp_table_map 
group by ContainerPathName; 

// loop through CSV table entries in search for LET and SET expresion
let vL.xxx = NoOfRows('vL.temp_table_map');

	for vL.ttt = 0 to vL.xxx-1
	
	LET vL.Comment =''; //reset comment entries 
	
	LET vL.ContainerPathName = PurgeChar(trim(peek(FieldName(1,'vL.temp_table_map'),$(vL.ttt),'vL.temp_table_map')),'=;,- '&chr(39)); // ContainerPathName variable field (Tag)
	LET vL.ContainerFolderName = lower(PurgeChar(trim(peek(FieldName(2,'vL.temp_table_map'),$(vL.ttt),'vL.temp_table_map')),'=;,'&chr(39))); // ContainerFolderName field
	LET vL.Comment = PurgeChar(trim(peek(FieldName(3,'vL.temp_table_map'),$(vL.ttt),'vL.temp_table_map')),';,'&chr(39)); // Comment Field 
	LET vL.RootPath = lower(PurgeChar(trim(peek(FieldName(4,'vL.temp_table_map'),$(vL.ttt),'vL.temp_table_map')),'=;,'&chr(39))); // RootPath other than default
	LET vL.ContainerPathNameCount = peek(FieldName(5,'vL.temp_table_map'),$(vL.ttt),'vL.temp_table_map');
	
	// Do not do anything if row is empty
	if not '$(vL.ContainerPathName)' = '' and not '$(vL.ContainerFolderName)' = '' then
	
	// Correct \ if not exist 
		if not right( '$(vL.ContainerFolderName)' , 1 ) ='\' then 
			let vL.ContainerName ='$(vL.ContainerFolderName)'&'\';
			else
			let vL.ContainerName ='$(vL.ContainerFolderName)';
		endif;
		
	// Special Switch to find vG.RootPath used by 1.Init during initiation process
	if   '$(vL.ContainerName)' =right(lower('$(vL.GetRootPath)'),len('$(vL.ContainerName)')) and '$(vL.RootPath)' = '' then
		
		LET vL.RootPath= left('$(vG.BasePath)',len('$(vG.BasePath)')-(len('$(vL.ContainerName)')));
		
		// Container Identification
		// more accurate but could be wrong if the file structure changes   
	
		// Validate if Container exists
		$(Include=$(vG.SubPath)\1.FileExist.qvs);
		call vL.FileExist (left('$(vL.RootPath)$(vL.ContainerName)',len('$(vL.RootPath)$(vL.ContainerName)')-1));
        if vL.FileExist = 'true' then
			// Set new vG.RootPath
			LET vG.RootPath= '$(vL.RootPath)';
			Trace '### DF Creating new vG.RootPath based on Container Map';
		endif
		// Exit For Loop
		SET vL.Exit='True';
		SET vL.ContainerIdentification=;
	
	
	endif;
	
	// Finding vL.SpecificVariable and return values from Container Map
	if ('$(vL.SpecificVariable)'='$(vL.ContainerPathName)' or '$(vL.SpecificVariable)'='$(vL.ContainerFolderName)')  then
		
		if left(trim('$(vL.RootPath)'),2) ='\\' or index('$(vL.RootPath)', ':')>0  then // If vL.AltRootPath have a valid path

			if not right('$(vL.RootPath)' , 1 ) ='\' then // Check and add '\' in root path
				let vL.RootPath ='$(vL.RootPath)'&'\';
			endif;
		else
			let vL.RootPath ='$(vG.RootPath)'; 
		endif;
	if vL.ContainerPathNameCount = 1 then // If only one container Path exists then exit 
			SET vL.Exit= 'True'; // Exit For Loop
				
		else // Several container Path exists, send error message
			Trace '### DF Warning! more than one $(vL.ContainerPathName) exists, please identify and fix.';
				//Reset vL.LoadContainerMapCount variable used to identify if two or more identical Variable Prefix exist
			SET vL.LoadContainerMapCount='$(vL.ContainerPathName)';
			Sleep 5000; SET 5000=; // Remove variable 5000 created when running sleep!?
			SET vL.Exit= 'True'; // Exit For Loop
	endif
		exit for when '$(vL.Exit)'='True';
	endif;
		exit for when '$(vL.Exit)'='True';	
	endif;
next;

drop table 'vL.temp_table_map'; // Dropping CSV Table after variables been read into the QlikView application

//Resetting variables
SET vL.ttt = ;
SET vL.xxx = ;
SET vL.CVSTableName = ;
SET vL.SpecificVariable = ;
SET vL.GetRootPath = ;
SET vL.Exit= ;
SET vL.ContainerName= ;
SET vL.ContainerPathNameCount= ;
end sub

// **********************************
// Application written by Magnus Berg
// QlikView International AB
// **********************************